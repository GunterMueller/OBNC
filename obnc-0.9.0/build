#!/bin/sh

# Copyright (C) 2017 Karl Landstrom <karl@miasap.se>
#
# This file is part of OBNC.
#
# OBNC is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# OBNC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OBNC.  If not, see <http://www.gnu.org/licenses/>.

set -o errexit -o nounset

readonly selfDirPath="$(cd "$(dirname "$0")"; pwd -P)"
prefix="/usr/local"
libdir="lib"

EchoAndRun()
{
	echo "$@"
	eval "$@"
}


BuildCSource()
{
	EchoAndRun cd "$selfDirPath/src"
	
	if [ ! -e lex.yy.c ] || [ ! -e lex.yy.h ] || [ lex.yy.c -ot Oberon.l ] || [ lex.yy.h -ot Oberon.l ]; then
		EchoAndRun lex --header-file=lex.yy.h Oberon.l
	else
		echo "lex.yy.c and lex.yy.h is up to date"
	fi
	
	if [ ! -e y.tab.c ] || [ ! -e y.tab.h ] || [ y.tab.c -ot Oberon.y ]; then
		local tmpdir="${TMPDIR:-/tmp}"
		local bakFile="$tmpdir/y.tab.h.$$"

		if [ -e y.tab.h ]; then
			cp -p y.tab.h "$bakFile"
			trap "rm '$bakFile'" EXIT
		fi

		EchoAndRun yacc -d -t Oberon.y

		#preserve timestamp of y.tab.h if it is unchanged
		if cmp -s y.tab.h "$bakFile"; then
			cp -p "$bakFile" y.tab.h
		fi
	else
		echo "y.tab.c and y.tab.h is up to date"
	fi
	
	cd "$selfDirPath"
}


Build()
{
	if [ -e "VERSION" ]; then
		local version="$(cat VERSION)"
	else
		local version=
	fi

	#generate configuration file for install script
	{
		echo "prefix=$prefix"
		echo "libdir=$libdir"
		echo "version=$version"
	} > CONFIG

	#generate configuration header file
	{
		echo "#ifndef CONFIG_H"
		echo "#define CONFIG_H"
		echo 
		printf "#define CONFIG_DEFAULT_PREFIX \"%s\"\n" "$prefix"
		printf "#define CONFIG_DEFAULT_LIBDIR \"%s\"\n" "$libdir"
		printf "#define CONFIG_VERSION \"%s\"\n" "$version"
		echo
		echo "const char *Config_Prefix(void);"
		echo "const char *Config_LibDir(void);"
		echo
		echo "#endif"
	} > src/Config.h
	
	BuildCSource

	#build compiler
	EchoAndRun cd "$selfDirPath/src"
	env CFLAGS="${CFLAGS:-}" "$selfDirPath/bin/micb" obnc-compile.c
	if [ ! -e "$selfDirPath/bin/obnc-compile" ] || [ "$selfDirPath/bin/obnc-compile" -ot obnc-compile ]; then
		cp obnc-compile "$selfDirPath/bin"
	fi
	
	#build core library module OBNC
	EchoAndRun cd "$selfDirPath/lib/obnc"
	"$selfDirPath/bin/micb" OBNCTest.c
		
	cd "$selfDirPath"
}


Clean()
{
	rm -f CONFIG
	
	rm -f bin/obnc-compile
	
	rm -f src/obnc-compile
	rm -f src/?*Test
	rm -f src/*.o
	rm -f src/Config.h

	rm -f lib/obnc/?*Test
	rm -f lib/obnc/*.o
	rm -fr lib/obnc/.obnc
}


CleanAll()
{
	Clean
	rm -f src/lex.yy.[ch]
	rm -f src/y.tab.[ch]
}


Help()
{
	echo "usage: "
	printf "\tbuild [c-source | clean | clean-all] [--prefix=PREFIX] [--libdir=LIBDIR]\n"
	printf "\tbuild -h\n"
	echo
	printf "\tc-source\tbuild only Yacc and Lex C source files\n"
	printf "\tclean\t\tdelete all generated files except YACC and Lex C files\n"
	printf "\tclean-all\tdelete all generated files\n"
	printf "\t--prefix\ttoplevel installation directory instead of /usr/local\n"
	printf "\t--libdir\tlibrary installation directory instead of lib\n"
}

action=
for arg in "$@"; do
	case "$arg" in
		c-source)
			action=c-source;;
		clean)
			action=clean;;
		clean-all)
			action=clean-all;;
		--prefix=*)
			prefix="${arg#--prefix=}"
			if [ "${prefix#/}" = "$prefix" ]; then
				echo "prefix must be an absolute path: $prefix" >&2
				exit 1
			fi;;
		--libdir=*)
			libdir="${arg#--libdir=}"
			if [ "${libdir#*/}" != "$libdir" ]; then
				echo "libdir must be a directory name, not a path: $prefix" >&2
				exit 1
			fi;;
		-h)
			Help
			exit;;
		*)
			{ echo "invalid command"; Help; } >&2
			exit 1
	esac
done

case "$action" in
	c-source)
		BuildCSource;;
	clean)
		Clean;;
	clean-all)
		CleanAll;;
	*)
		Build
esac
