#!/usr/bin/awk -f

# Copyright (C) 2017, 2018 Karl Landstrom <karl@miasap.se>
#
# This file is part of OBNC.
#
# OBNC is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# OBNC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OBNC.  If not, see <http://www.gnu.org/licenses/>.

function MatchSyntax(line, regex,
	regex1, pos, found, matchedString, commentLevel, insideString)
{
	#ignore comments and strings
	regex1 = "("regex")|\\(\\*|\\*\\)|\""
	match(line, regex1)
	pos = RSTART
	while (! found && (RSTART > 0)) {
		matchedString = substr(line, pos, RLENGTH)
		if ((matchedString == "(*") && ! insideString) {
			commentLevel++
		} else if ((matchedString == "*)") && ! insideString) {
			commentLevel--
		} else if ((matchedString == "\"") && (commentLevel == 0)) {
			insideString = ! insideString
		} else if ((commentLevel == 0) && ! insideString) {
			found = 1
		}
		if (! found) {
			pos += RLENGTH
			match(substr(line, pos), regex1)
			if (RSTART > 0) {
				pos += RSTART - 1
			} else {
				pos = 0
			}
		}
	}
	RSTART = pos
	return RSTART
}


function CommentLevelAtEndOfLine(line, currentLevel,
	regexp, matchedString)
{
	regexp = "\\(\\*|\\*\\)|\""
	match(line, regexp)
	while (RSTART > 0) {
		matchedString = substr(line, RSTART, RLENGTH)
		line = substr(line, RSTART + RLENGTH)
		if (matchedString == "(*") {
			currentLevel++
		} else if (matchedString == "*)") {
			currentLevel--
		} else if (matchedString == "\"") {
			if (currentLevel == 0) {
				line = substr(line, index(line, "\"") + 1)
			}
		}
		match(line, regexp)
	}
	return currentLevel
}


function EndsInsideRecord(line,
	parts)
{
	return MatchSyntax(line, "[^"identCharSet"]RECORD([^"identCharSet"]|$)") \
		&& ! MatchSyntax(line, "[^"identCharSet"]END[ \t]*;")
}


function TrackQualifiers(line,
	regex, matchedString)
{
	regex = identRegex"\\."identRegex
	MatchSyntax(line, regex)
	while (RSTART > 0) {
		matchedString = substr(line, RSTART, RLENGTH)
		line = substr(line, RSTART + RLENGTH)
		match(matchedString, identRegex)
		publicImports[substr(matchedString, 1, RLENGTH)] = ""
		MatchSyntax(line, regex)
	}
}


function ExportedParts(line,
	left, right)
{
	match(line, "[=:;(]|\\(\\*")
	if (RSTART > 0) {
		left = substr(line, 1, RSTART - 1)
		right = substr(line, RSTART)
		if (index(left, ",") > 0) {
			#exclude non-exported identifiers
			gsub(identRegex"[ \t]*,[ \t]*", "", left)
			sub("(,[ \t]*)?"identRegex"[ \t]*$", "", left)
		}
		gsub("\\*", "", left)
		
		#skip past trailing semi-colon (if any)
		if (substr(right, 1, 1) == ";") {
			left = left ";"
			right = substr(right, 2)
		} else {
			MatchSyntax(right, ";")
			if (RSTART > 0) {
				left = left "" substr(right, 1, RSTART)
				right = substr(right, RSTART + 1)
			}
		}
		
		#skip to trailing comment (if any)
		match(right, "[ \t]*\\(\\*")
		if (RSTART > 0) {
			left = left "" substr(right, 1, RSTART - 1)
			right = substr(right, RSTART)
		}
		
		sub("^[ \t]*\\(\\*([^*].*|$)", "", right) #delete non-exported comment
		sub("^[ \t]*\\(\\*\\*", " (*", right) #unmark exported comment
		line = left""right
	}
	return line
}

BEGIN {
	leadingIdentCharSet = "A-Za-z"
	identCharSet = leadingIdentCharSet"0-9"
	identRegex = "["leadingIdentCharSet"]["identCharSet"]*"
	exportedIdentRegex = identRegex"[ \t]*\\*"
	exportedIdentListRegex = "("identRegex"[ \t]*,[ \t]*)*"identRegex"[ \t]*\\*([ \t]*,[ \t]*"identRegex")*"
	savedOutput = "" #output after import list
	insideExportedRecord = 0
	exportedFieldFound = 0
	moduleIdent = ""
	currentSection = ""
	commentLevel = 0
	insideExportedComment = 0
	exportedFeatureFound["CONST"] = 0
	exportedFeatureFound["TYPE"] = 0
	exportedFeatureFound["VAR"] = 0
	split("", aliasedImports) #initialize empty array
	split("", publicImports) #initialize empty array
}

(commentLevel == 0) && ($1 == "MODULE") {
	if (substr($2, length($2), 1) == ";") {
		moduleIdent = substr($2, 1, length($2) - 1)
	} else {
		moduleIdent = $2
	}
	line = $0
	sub(/MODULE/, "DEFINITION", line)
	commentLevel = CommentLevelAtEndOfLine(line, commentLevel)
	print ExportedParts(line)
	next
}

(commentLevel == 0) && ($1 == "IMPORT") {
	currentSection = "IMPORT"
}

(commentLevel == 0) && (currentSection == "IMPORT") {
	#add aliased modules to aliasedImports
	aliasedImportRegex = identRegex "[ \t]*:=[ \t]*" identRegex
	oldPos = 0
	newPos = MatchSyntax($0, aliasedImportRegex)
	while (newPos > oldPos) {
		str = substr($0, newPos, RLENGTH)
		split(str, import, "[ \t:=]+")
		aliasedImports[import[1]] = import[2]
		oldPos = newPos
		newPos += RLENGTH
		newPos += MatchSyntax(substr($0, newPos),  aliasedImportRegex) - 1
	}

	#are we on the last import line?
	MatchSyntax($0, ";")
	if (RSTART > 0) {
		currentSection = ""
	}

	next
}

(commentLevel == 0) && /^[ \t]*$/ {
	if (match(currentSection, "^(CONST|TYPE|VAR)$")) {
		sub("\n+$", "\n\n", savedOutput)
	}
}

(commentLevel == 0) && (currentSection != "PROCEDURE") && ($1 ~ "^(CONST|TYPE|VAR)$") {
	currentSection = $1
	sub("\n+$", "\n", savedOutput)
	if (match($2$3, "^"exportedIdentRegex)) {
		TrackQualifiers($0)
		commentLevel = CommentLevelAtEndOfLine($0, commentLevel)
		insideExportedRecord = EndsInsideRecord($0)
		savedOutput = savedOutput ExportedParts($0) "\n"
		exportedFeatureFound[$1] = 1
	}
	next
}

(commentLevel == 0) && (currentSection != "PROCEDURE") && insideExportedRecord && ($1 ~ "^END[ \t]*;") {
	line = $0
	if (! exportedFieldFound) {
		sub("^[ \t]*", " ", line)
	}
	insideExportedRecord = 0
	exportedFieldFound = 0
	savedOutput = savedOutput ExportedParts(line) "\n"
	next
}

(commentLevel == 0) && ($1 == "PROCEDURE") && ($2 ~ "^"identRegex) {
	currentSection = "PROCEDURE"
	sub("\n+$", "\n", savedOutput)
}

(commentLevel == 0) && ($0 ~ "^[ \t]*(PROCEDURE[ \t]+)?"exportedIdentListRegex) {
	if (match(currentSection, "^(CONST|TYPE|VAR)$") && ! exportedFeatureFound[currentSection]) {
		savedOutput = savedOutput "\n\t" currentSection "\n"
		exportedFeatureFound[currentSection] = 1
	}
	TrackQualifiers($0)
	if (insideExportedRecord) {
		if (! exportedFieldFound) {
			savedOutput = savedOutput "\n"
			exportedFieldFound = 1
		}
	} else {
		insideExportedRecord = EndsInsideRecord($0)
	}
	commentLevel = CommentLevelAtEndOfLine($0, commentLevel)
	if ($1 == "PROCEDURE") {
		savedOutput = savedOutput "\n"
	}
	savedOutput = savedOutput ExportedParts($0)
	if (! (insideExportedRecord && ! exportedFieldFound)) {
		savedOutput = savedOutput "\n"
	}
	next
}

(commentLevel == 0) && ($1 == "END") && ($2$3 ~ "^"moduleIdent"\\.") {
	commentLevel = CommentLevelAtEndOfLine($0, commentLevel)
	if (match(savedOutput, "^\n*$")) {
		savedOutput = ""
	} else {
		savedOutput = savedOutput "\n"
	}
	savedOutput = savedOutput ExportedParts($0) "\n"
	next
}

(commentLevel == 0) && ($1 ~ "^\\(\\*\\*?") {
	commentLevel = CommentLevelAtEndOfLine($0, commentLevel)
	if (match($1, "^\\(\\*\\*")) {
		if (match(currentSection, "CONST|TYPE|VAR") && ! exportedFeatureFound[currentSection]) {
			savedOutput = savedOutput "\n\t" currentSection "\n"
			exportedFeatureFound[currentSection] = 1
		}
		line = $0
		sub(/\(\*\*/, "(*", line)
		if (commentLevel > 0) {
			insideExportedComment = 1
		}
		if (currentSection == "") {
			print line
		} else {
			if (match(savedOutput, "\\*\\)[ \t\n]*$")) {
				#add blank line between comments
				savedOutput = savedOutput "\n"
			}
			savedOutput = savedOutput line "\n"
		}
	}
	next
}

commentLevel > 0 {
	if (insideExportedComment) {
		if (currentSection == "") {
			print $0
		} else {
			savedOutput = savedOutput $0 "\n"
		}	
	}
	commentLevel = CommentLevelAtEndOfLine($0, commentLevel)
	if (commentLevel == 0) {
		insideExportedComment = 0
	}
}

END {
	#print import list
	n = 0
	for (key in publicImports) {
		n++
	}
	if (n > 0) {
		printf "\n\tIMPORT"
		i = 1
		for (key in publicImports) {
			if (i > 1) {
				printf ","
			}
			printf " %s", key
			if (aliasedImports[key] != "") {
				printf " := %s", aliasedImports[key]
			}
			i++
		}
		print ";"
	}
	
	sub("\n+$", "", savedOutput)
	print savedOutput
}
